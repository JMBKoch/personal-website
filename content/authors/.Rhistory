out <- t(as.data.frame(unlist(out)))
rownames(out) <- NULL
# cbind conditions into output
# outFinal <-cbind(
#   #cond,
#             biasMain,
#             biasCross,
#             biasFactCorr,
#             biasTheta
#             )
# return output
return(out)
}
output(FitA)
test <- output(FitA)
test
is.data.frame(test)
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta
#,
#cond = conditions[i, ]
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# recode output into wide format (hacky, adjust this!)
out <- t(as.data.frame(unlist(out)))
rownames(out) <- NULL
# cbind conditions into output
# outFinal <-cbind(
#   #cond,
#             biasMain,
#             biasCross,
#             biasFactCorr,
#             biasTheta
#             )
# return output
return(out)
}
output(FitA)
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta
#,
#cond = conditions[i, ]
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# recode output into wide format (hacky, adjust this!)
# out <- t(as.data.frame(unlist(out)))
colnames(out)[1] <- "item"
# cbind conditions into output
# outFinal <-cbind(
#   #cond,
#             biasMain,
#             biasCross,
#             biasFactCorr,
#             biasTheta
#             )
# return output
return(out)
}
output(FitA)
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta
#,
#cond = conditions[i, ]
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# recode output into wide format (hacky, adjust this!)
# out <- t(as.data.frame(unlist(out)))
rowmanes(out) <- NULL
colnames(out)[1] <- "item"
# cbind conditions into output
# outFinal <-cbind(
#   #cond,
#             biasMain,
#             biasCross,
#             biasFactCorr,
#             biasTheta
#             )
# return output
return(out)
}
output(FitA)
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta
#,
#cond = conditions[i, ]
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# recode output into wide format (hacky, adjust this!)
# out <- t(as.data.frame(unlist(out)))
rownames(out) <- NULL
colnames(out)[1] <- "item"
# cbind conditions into output
# outFinal <-cbind(
#   #cond,
#             biasMain,
#             biasCross,
#             biasFactCorr,
#             biasTheta
#             )
# return output
return(out)
}
output(FitA)
tidyr::pivot_wider(output(FitA), id_cols = item)
tidyr::pivot_wider(output(FitA), names_from = item, values_from = c(biasMain))
tidyr::pivot_wider(output(FitA), names_from = item, values_from = c(biasMain, biasCross, biasFactCorr, biasTheta))
conditions <- condSVNP[1,]
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta,
cond = conditions
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# make row and colnames proper
rownames(out) <- NULL
colnames(out)[1] <- "item"
# recode output into wide format
out <- tidyr::pivot_wider(out,
names_from = item,
values_from = c(biasMain,
biasCross,
biasFactCorr,
biasTheta))
# cbind conditions into output
out <- cbind(out, cond)
# return output
return(out)
}
output(FitA)
output(FitA)
output <- function(rstanObj,
mainTrue = main,
crossTrue = cross,
PsiTrue = Psi,
ThetaTrue = Theta,
cond = conditions
){
# estimates Lambda
mainEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaMainC[1]",
"lambdaMainC[2]",
"lambdaMainC[3]",
"lambdaMainC[4]",
"lambdaMainC[5]",
"lambdaMainC[6]")))
crossEst <- colMeans(as.matrix(rstanObj, pars = c("lambdaCrossC[1]",
"lambdaCrossC[2]",
"lambdaCrossC[3]",
"lambdaCrossC[4]",
"lambdaCrossC[5]",
"lambdaCrossC[6]")))
# estimates Factor-Corr
corrEst <- colMeans(as.matrix(rstanObj, pars = c("Psi[2, 1]")))
# estimates Theta
thetaEst <- colMeans(as.matrix(rstanObj, pars = "theta"))
# Bias Lambda
biasMain <- abs(mainEst-mainTrue)
biasCross <- abs(crossEst-crossTrue)
# Bias Factor Correlation
biasFactCorr <-  abs(corrEst - PsiTrue[1, 2])
# Bias Theta
biasTheta <- abs(thetaEst - diag(ThetaTrue))
# TBA: MSE
# TBA: True & False positives in estimating truly non-0 as non-0
#   THINK WELL OF SELECTION CRITERIA
# TBA: save output (in list?)
# Output
out <- as.data.frame(cbind(
#cond, # save results
1:6,
biasMain,
biasCross,
biasFactCorr,
biasTheta
))
# make row and colnames proper
rownames(out) <- NULL
colnames(out)[1] <- "item"
# recode output into wide format
out <- tidyr::pivot_wider(out,
names_from = item,
values_from = c(biasMain,
biasCross,
biasFactCorr,
biasTheta))
# cbind conditions into output
out <- cbind(out, cond)
# return output
return(out)
}
output(FitA)
is.data.frame(output(FitA))
class(output(FitA))
View(output(FitA))
# start nested loop (i = condition config, j = iteration)
for (i in 1:2){
for (j in 1:2){
# do the sampling
samples <- model$sample(data = datasets[[i]][[j]],
chains = 2,
parallel_chains = 2,
iter_warmup = 50, # 4000 total iterations
iter_sampling = 50)
# print progress message
print(paste("**************** THIS IS ITERATION ",
as.character(j),
"OF ROW ",
as.character(i),
"****************"))
# save desired ouput
output <- output(FitA, conditions = condSVNP[i, ])
# cbind iteration into output
output$iteration <- j
# rbind output into final output
outputFinal <- rbind(outputFinal, output)
}
}
# prepare 50x per unique combination of conditions
for (i in 1:nrow(condRHSP)){
# simulate & prepare data 50x per set of conditions (row of condRHSP)
dat <- list()
for (j in 1:50){
Y <- simDat(L, Psi, Theta, condSVNP[i, ]$N)
dat[[j]] <-  prepareDat(Y, condSVNP[i, ])
}
# save dat in an element of the datasets output object, per row
datasets[[i]] <- dat
}
# Prepare data ------------------------------------------------------------
# allocate memory for final output
datasets <- list()
# source conditions
source('~/1vs2StepBayesianRegSEM/R/conditions.R')
# source functions
source('~/1vs2StepBayesianRegSEM/R/functions.R')
# prepare 50x per unique combination of conditions
for (i in 1:nrow(condRHSP)){
# simulate & prepare data 50x per set of conditions (row of condRHSP)
dat <- list()
for (j in 1:50){
Y <- simDat(L, Psi, Theta, condSVNP[i, ]$N)
dat[[j]] <-  prepareDat(Y, condSVNP[i, ])
}
# save dat in an element of the datasets output object, per row
datasets[[i]] <- dat
}
rm(list = ls())
library(cmdstanr)
library(mvtnorm)
library(rstan)
library(shinystan)
library(bayesplot)
# source conditions
source('~/1vs2StepBayesianRegSEM/R/conditions.R')
# source functions
source('~/1vs2StepBayesianRegSEM/R/functions.R')
# Prepare data ------------------------------------------------------------
# allocate memory for final output
datasets <- list()
# prepare 50x per unique combination of conditions
for (i in 1:nrow(condRHSP)){
# simulate & prepare data 50x per set of conditions (row of condRHSP)
dat <- list()
for (j in 1:50){
Y <- simDat(L, Psi, Theta, condSVNP[i, ]$N)
dat[[j]] <-  prepareDat(Y, condSVNP[i, ])
}
# save dat in an element of the datasets output object, per row
datasets[[i]] <- dat
}
datasets
condSVNP
# start nested loop (i = condition config, j = iteration)
for (i in 1:2){
for (j in 1:2){
# do the sampling
samples <- model$sample(data = datasets[[i]][[j]],
chains = 2,
parallel_chains = 2,
iter_warmup = 50, # 4000 total iterations
iter_sampling = 50)
# print progress message
print(paste("**************** THIS IS ITERATION ",
as.character(j),
"OF ROW ",
as.character(i),
"****************"))
# save desired ouput
output <- output(FitA, conditions = condSVNP[i, ])
# cbind iteration into output
output$iteration <- j
# rbind output into final output
outputFinal <- rbind(outputFinal, output)
}
}
model <- cmdstan_model("~/1vs2StepBayesianRegSEM/stan/SmallVarNormal.stan")
# start nested loop (i = condition config, j = iteration)
for (i in 1:2){
for (j in 1:2){
# do the sampling
samples <- model$sample(data = datasets[[i]][[j]],
chains = 2,
parallel_chains = 2,
iter_warmup = 50, # 4000 total iterations
iter_sampling = 50)
# print progress message
print(paste("**************** THIS IS ITERATION ",
as.character(j),
"OF ROW ",
as.character(i),
"****************"))
# save desired ouput
output <- output(FitA, conditions = condSVNP[i, ])
# cbind iteration into output
output$iteration <- j
# rbind output into final output
outputFinal <- rbind(outputFinal, output)
}
}
